@page "/resultadoSubida"


@using BlazorStrap
@using BlazorStrap.V5
@using CurrieTechnologies.Razor.SweetAlert2
@using LaboratorioBlazorUI.Servicios
@using Radzen
@using Radzen.Blazor
@using System.ComponentModel.DataAnnotations
@using global::DTOs.ResultadoClinicoDTOs
@inject ResultadoService resultadoService
@inject SweetAlertService Swal

<h3>CargaResultados</h3>


<RadzenRow class="rz-text-align-center rz-border-info-light" Gap="1rem">
    <RadzenColumn Size="4" class="rz-background-color-info-lighter rz-color-on-info-lighter rz-p-2 rz-p-md-5">

        <RadzenRow>

           <!--INPUT FILE LOAD-->
            <div>

                <RadzenCard>
                    <div class="file-input">

                        <InputFile name="file-input" id="file-input"
                                   class="file-input__input" OnChange="OnChange" />
                        <label class="file-input__label" for="file-input">
                            <svg aria-hidden="true"
                                 focusable="false"
                                 data-prefix="fas"
                                 data-icon="upload"
                                 class="svg-inline--fa fa-upload fa-w-16"
                                 role="img"
                                 xmlns="http://www.w3.org/2000/svg"
                                 viewBox="0 0 512 512">
                                <path fill="currentColor"
                                      d="M296 384h-80c-13.3 0-24-10.7-24-24V192h-87.7c-17.8 0-26.7-21.5-14.1-34.1L242.3 5.7c7.5-7.5 19.8-7.5 27.3 0l152.2 152.2c12.6 12.6 3.7 34.1-14.1 34.1H320v168c0 13.3-10.7 24-24 24zm216-8v112c0 13.3-10.7 24-24 24H24c-13.3 0-24-10.7-24-24V376c0-13.3 10.7-24 24-24h136v8c0 30.9 25.1 56 56 56h80c30.9 0 56-25.1 56-56v-8h136c13.3 0 24 10.7 24 24zm-124 88c0-11-9-20-20-20s-20 9-20 20 9 20 20 20 20-9 20-20zm64 0c0-11-9-20-20-20s-20 9-20 20 9 20 20 20 20-9 20-20z"></path>
                            </svg>
                            <span>Cargar Resultado</span>
                        </label>
                    </div>
                </RadzenCard>

                <style>
                    .file-input__input {
                        width: 0.1px;
                        height: 0.1px;
                        opacity: 0;
                        overflow: hidden;
                        position: absolute;
                        z-index: -1;
                    }

                    .file-input__label {
                        cursor: pointer;
                        display: inline-flex;
                        align-items: center;
                        border-radius: 4px;
                        font-size: 14px;
                        font-weight: 600;
                        color: #fff;
                        font-size: 14px;
                        padding: 10px 12px;
                        background-color: #4245a8;
                        box-shadow: 0px 0px 2px rgba(0, 0, 0, 0.25);
                    }

                        .file-input__label svg {
                            height: 16px;
                            margin-right: 4px;
                        }

                </style>

            </div>


            <BSCard CardType="CardType.Card" style="width:500px;">
                <!--<BSCard CardType="CardType.Image" src="https://pdf-temp-files.s3.us-west-2.amazonaws.com/J6XMBZ2LXIE1PIS4XX0DGNTTRAQSAWZV/file.png?X-Amz-Expires=3600&X-Amz-Security-Token=FwoGZXIvYXdzEM%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaDFBSZLo5HLKa8l91eSKCAYhLVFqKZZGm3hAv8hRJL1SlVQfaPRRzJQBASrJySylDNre9s3%2FSpfe8li3jpELqjPHhT7i9oBGQqrAjlAi9G0OfJtsim%2FT4pZTc9BltDQ3GY2TO8JRMHQA2DHpFM9BowQ6vFJuTJMvUrkSrr4xxe0yRFFty4M%2B5QM46SZVTi14ERDso8c3drwYyKAEMhmWd1c52yHdOILAYp8LxdSw3T%2BwVo%2B4K7wZuzDk4sP9vXCNLh3U%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIA4NRRSZPHGM2R4IO3/20240317/us-west-2/s3/aws4_request&X-Amz-Date=20240317T220241Z&X-Amz-SignedHeaders=host&X-Amz-Signature=5df3e840ff0c87d408c830cc47a5fc337a1a4633d2c7ca0b6817a3c5554bfb0c" alt="Card image cap" />-->
                <iframe width="300px" height="250" src="https://pub-bb695d5f0667442a887cb27931ea5d88.r2.dev/40213181072-61090"></iframe>
            </BSCard>

        </RadzenRow>

       

    </RadzenColumn>
    <RadzenColumn Size="8" class="rz-background-color-info-lighter rz-color-on-info-lighter rz-p-1 rz-p-md-1">
      

            <RadzenRow>
            <div Class="rz-p-0 rz-p-md-12">
                <BSForm Model="busquedaModel" IsRow="true" Gutters="Gutters.Medium" OnValidSubmit="BuscarDestinatario" OnReset="OnReset">

                    <DataAnnotationsValidator />

                    <BSCol Position="Position.Relative" Column="12" PaddingBottom="Padding.ExtraLarge">
                        <BSRow RowColumns="3">

                            <BSCol Column="5">
                                <BSLabel>Documento de identidad</BSLabel>
                            </BSCol>
                            <BSCol>

                                <BSInput InputType="InputType.Text" @bind-Value="busquedaModel.DocumentoIdentidad" ValidateOnInput="true" />
                                <BSFeedback For="@(() => busquedaModel.DocumentoIdentidad)" ValidMessage="..." />

                            </BSCol>

                            <BSCol Column="1">
                                <BSButton Color="BSColor.Primary" Size="Size.Small" IsSubmit="true">Buscar</BSButton>
                                @if (searchSpiner)
                                {
                                    <BSSpinner></BSSpinner>
                                }

                            </BSCol>
                        </BSRow>

                    </BSCol>

                </BSForm>

                <BSForm Model="destinatario" IsRow="true" Gutters="Gutters.Medium" OnValidSubmit="OnSubmit" OnReset="OnReset">

                    <DataAnnotationsValidator />


                    @if (!string.IsNullOrEmpty(destinatario.Documento))
                    {
                        <div style="height:100px">
                            <BSRow RowColumns="1">
                                Nombre
                                <BSCol Column="7">
                                    <input class="form-control" type="text" value="@destinatario.Nombre" aria-label="readonly input example" readonly>
                                </BSCol>
                            </BSRow>
                            <BSRow RowColumns="1">
                                Apellido
                                <BSCol Column="7">
                                    <input class="form-control" type="text" value="@destinatario.Apellido" aria-label="readonly input example" readonly>
                                </BSCol>
                            </BSRow>
                        </div>

                    }



                    <BSCol Position="Position.Relative" style="height:100px;" ColumnMedium="12">
                        <BSRow Align="Align.Start">
                            @_message

                        </BSRow>

                        <BSValidationSummary />

                    </BSCol>

                    <BSRow>
                        <BSCol Column="10">
                        </BSCol>
                        <BSCol Column="2">
                            <BSButton Color="BSColor.Success" Size="Size.Large" IsSubmit="true">Guardar</BSButton>
                        </BSCol>
                    </BSRow>
                </BSForm>

            </div>

            </RadzenRow>
       
    </RadzenColumn>
    <RadzenColumn Size="12" class="rz-background-color-info-lighter rz-color-on-info-lighter rz-p-2 rz-p-md-5">

    </RadzenColumn>
</RadzenRow>


@code {
    private const int tamañoMaximoArchivo = 2 * 1024 * 1027;
    private List<string> archivosBase64 = new List<string>();
    private string? TextValue { get; set; } = "Leandro Batista";
    private DestinatarioDTO destinatario = new();
    private Stream file;

    async Task OnChange(InputFileChangeEventArgs e)
    {
        Console.WriteLine("CAMBIO");
        Console.WriteLine(e.File);

        foreach (var item in e.GetMultipleFiles())
        {
            using var stream = item.OpenReadStream(tamañoMaximoArchivo);
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            file = ms;
        }

    }


    private BusquedaModel busquedaModel { get; set; } = new BusquedaModel();
    private string _message = "";

    private void OnReset(IBSForm bSForm)
    {
        bSForm.Reset();
    }

    bool searchSpiner = false;
    bool isBusy = false;

    private string _mensajeError;


    private async Task OnSubmit(EditContext e)
    {
        try
        {
            await this.resultadoService.SubirResultado(new ResultadoClinicoCreacionDTO()
                {
                    DocumentoIdentidadDestinatario = destinatario.Documento,
                    ResultadoFileStream = this.file
                });

            await Swal.FireAsync("Exito!", "Subida con exito", SweetAlertIcon.Success);
        }
        catch (Exception ex)
        {

            await Swal.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }



    }
    public class BusquedaModel
    {
        [Required(ErrorMessage = "Indique el documento de identidad.")]
        [RegularExpression(@"^\d{3}-\d{7}-\d{1}$", ErrorMessage = "Formato requerido: XXX-XXXXXXX-X.")]
        public string? DocumentoIdentidad { get; set; } = "";
    }



    private async Task BuscarDestinatario()
    {
        try
        {
            var result = await resultadoService.BuscarDestinatario(busquedaModel.DocumentoIdentidad);

            destinatario = result;
        }
        catch (Exception ex)
        {
            destinatario = new();
            await Swal.FireAsync("Error", $"{ex.Message}");
        }
    }

}
